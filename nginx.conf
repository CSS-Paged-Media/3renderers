events {
    worker_connections 512;
}

http {
    upstream api_backend {
        least_conn;
        server api:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;

    # File upload limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # HTTP: handle ACME http-01 and redirect everything else to HTTPS
    server {
        listen 80;
        server_name 3renderers.dev www.3renderers.dev;

        # ACME challenge folder (for certbot http-01)
        location /.well-known/acme-challenge/ {
            root /var/www/letsencrypt;
        }

        # Redirect all other requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block (main site + proxy)
    server {
        listen 443 ssl http2;
        server_name 3renderers.dev www.3renderers.dev;

        # TLS certificates (Let's Encrypt default paths) - ensure these exist on the host
        ssl_certificate /etc/letsencrypt/live/3renderers.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/3renderers.dev/privkey.pem;

        # Serve static files from the mounted public folder
        root /usr/share/nginx/html;
        index index.html;

        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log warn;

        # Serve static site directly from mounted /usr/share/nginx/html (./public)
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
            add_header Cache-Control "public, max-age=3600";
        }

        # Health check endpoint (no rate limit)
        location /health {
            proxy_pass http://api_backend/health;
            access_log off;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api_limit burst=10 nodelay;
            limit_req_status 429;  # Return 429 instead of 503

            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts for long-running PDF generation
            proxy_connect_timeout 60s;
            proxy_send_timeout 180s;
            proxy_read_timeout 180s;

            # Try next upstream on errors/timeouts to avoid intermittent 502s
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Upload endpoint (stricter rate limit)
        location /api/render {
            limit_req zone=upload_limit burst=3 nodelay;
            limit_req_status 429;  # Return 429 instead of 503

            proxy_pass http://api_backend/api/render;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Extended timeouts for uploads
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # Try next upstream on errors/timeouts to avoid intermittent 502s
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;

            client_max_body_size 10M;
        }
    }
}